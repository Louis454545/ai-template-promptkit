---
description: 
globs: 
alwaysApply: true
---
# prompt-kit
Message
-------

A component for displaying messages in a conversation interface, with support for avatars, markdown content, and interactive actions.

Basic message
```
import {
  Message,
  MessageAvatar,
  MessageContent,
} from "@/components/prompt-kit/message"

export function MessageBasic() {
  return (
    <div className="flex flex-col gap-8">
      <Message className="justify-end">
        <MessageContent>Hello! How can I help you today?</MessageContent>
      </Message>

      <Message className="justify-start">
        <MessageAvatar src="/avatars/ai.png" alt="AI" fallback="AI" />
        <MessageContent markdown className="bg-transparent p-0">
          I can help with a variety of tasks: answering questions, providing
          information, assisting with coding, generating creative content. What
          would you like help with today?
        </MessageContent>
      </Message>
    </div>
  )
}

```
### Message with Markdown

The `markdown` prop enables rendering content as [Markdown](mdc:https:/www.prompt-kit.com/docs/markdown), perfect for rich text formatting in messages.

```
import {
  Message,
  MessageAvatar,
  MessageContent,
} from "@/components/prompt-kit/message"

export function MessageWithMarkdown() {
  return (
    <div className="space-y-4">
      <Message>
        <MessageAvatar src="https://github.com/ibelick.png" alt="Ibelick" />
        <MessageContent
          markdown
          className="prose-h2:!mt-0 prose-h2:!scroll-m-0"
        >
          {`## Hello World!
          
This message supports **bold text**, *italics*, and other Markdown features:

- Bullet points
- Code blocks
- [Links](https://example.com)

\`\`\`js
// Even code with syntax highlighting
function hello() {
  return "world";
}
\`\`\`
          `}
        </MessageContent>
      </Message>
    </div>
  )
}

```


### Message with Actions

You can use `MessageActions` and `MessageAction` to add interactive elements to your messages.

```
"use client"

import {
  Message,
  MessageAction,
  MessageActions,
  MessageAvatar,
  MessageContent,
} from "@/components/prompt-kit/message"
import { Button } from "@/components/ui/button"
import { Copy, ThumbsDown, ThumbsUp } from "lucide-react"
import { useState } from "react"

export function MessageWithActions() {
  const [liked, setLiked] = useState<boolean | null>(null)
  const [copied, setCopied] = useState(false)

  const handleCopy = () => {
    const text =
      "I can help with a variety of tasks:\n\n- Answering questions\n- Providing information\n- Assisting with coding\n- Generating creative content\n\nWhat would you like help with today?"
    navigator.clipboard.writeText(text)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  return (
    <div className="flex flex-col gap-8">
      <Message className="justify-end">
        <MessageContent>Hello! How can I help you today?</MessageContent>
      </Message>

      <Message className="justify-start">
        <MessageAvatar src="/avatars/ai.png" alt="AI" fallback="AI" />
        <div className="flex w-full flex-col gap-2">
          <MessageContent markdown className="bg-transparent p-0">
            I can help with a variety of tasks: - Answering questions -
            Providing information - Assisting with coding - Generating creative
            content What would you like help with today?
          </MessageContent>

          <MessageActions className="self-end">
            <MessageAction tooltip="Copy to clipboard">
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8 rounded-full"
                onClick={handleCopy}
              >
                <Copy className={`size-4 ${copied ? "text-green-500" : ""}`} />
              </Button>
            </MessageAction>

            <MessageAction tooltip="Helpful">
              <Button
                variant="ghost"
                size="icon"
                className={`h-8 w-8 rounded-full ${liked === true ? "bg-green-100 text-green-500" : ""}`}
                onClick={() => setLiked(true)}
              >
                <ThumbsUp className="size-4" />
              </Button>
            </MessageAction>

            <MessageAction tooltip="Not helpful">
              <Button
                variant="ghost"
                size="icon"
                className={`h-8 w-8 rounded-full ${liked === false ? "bg-red-100 text-red-500" : ""}`}
                onClick={() => setLiked(false)}
              >
                <ThumbsDown className="size-4" />
              </Button>
            </MessageAction>
          </MessageActions>
        </div>
      </Message>
    </div>
  )
}

```

Installation
------------

```
pnpm dlx shadcn@lastest add "https://prompt-kit.com/c/message.json"
```


Component API
-------------

### Message


|Prop     |Type                           |Default|Description               |
|---------|-------------------------------|-------|--------------------------|
|children |React.ReactNode                |       |Child components to render|
|className|string                         |       |Additional CSS classes    |
|...props |React.HTMLProps<HTMLDivElement>|       |All other div props       |


### MessageAvatar


|Prop     |Type  |Default|Description                           |
|---------|------|-------|--------------------------------------|
|src      |string|       |URL of the avatar image               |
|alt      |string|       |Alt text for the avatar image         |
|fallback |string|       |Text to display if image fails to load|
|delayMs  |number|       |Delay before showing fallback (in ms) |
|className|string|       |Additional CSS classes                |


### MessageContent


|Prop     |Type                           |Default|Description                          |
|---------|-------------------------------|-------|-------------------------------------|
|children |React.ReactNode                |       |Content to display in the message    |
|markdown |boolean                        |false  |Whether to render content as markdown|
|className|string                         |       |Additional CSS classes               |
|...props |React.HTMLProps<HTMLDivElement>|       |All other div props                  |


### MessageActions


|Prop     |Type                           |Default|Description               |
|---------|-------------------------------|-------|--------------------------|
|children |React.ReactNode                |       |Child components to render|
|className|string                         |       |Additional CSS classes    |
|...props |React.HTMLProps<HTMLDivElement>|       |All other div props       |


### MessageAction



* Prop: tooltip
  * Type: React.ReactNode
  * Default: 
  * Description: Content to show in the tooltip
* Prop: children
  * Type: React.ReactNode
  * Default: 
  * Description: Child component to trigger the tooltip
* Prop: className
  * Type: string
  * Default: 
  * Description: Additional CSS classes for the tooltip
* Prop: side
  * Type: "top" | "bottom" | "left" | "right"
  * Default: "top"
  * Description: Position of the tooltip relative to the trigger
* Prop: ...props
  * Type: React.ComponentProps<typeof Tooltip>
  * Default: 
  * Description: All other Tooltip component props
