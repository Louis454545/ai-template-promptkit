---
description: 
globs: 
alwaysApply: true
---
# prompt-kit
Prompt Input
------------

An input field that allows users to enter and submit text to an AI model.

Prompt Input basic
```
"use client"

import {
  PromptInput,
  PromptInputAction,
  PromptInputActions,
  PromptInputTextarea,
} from "@/components/prompt-kit/prompt-input"
import { Button } from "@/components/ui/button"
import { ArrowUp, Square } from "lucide-react"
import { useState } from "react"

export function PromptInputBasic() {
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)

  const handleSubmit = () => {
    setIsLoading(true)
    setTimeout(() => {
      setIsLoading(false)
    }, 2000)
  }

  const handleValueChange = (value: string) => {
    setInput(value)
  }

  return (
    <PromptInput
      value={input}
      onValueChange={handleValueChange}
      isLoading={isLoading}
      onSubmit={handleSubmit}
      className="w-full max-w-(--breakpoint-md)"
    >
      <PromptInputTextarea placeholder="Ask me anything..." />
      <PromptInputActions className="justify-end pt-2">
        <PromptInputAction
          tooltip={isLoading ? "Stop generation" : "Send message"}
        >
          <Button
            variant="default"
            size="icon"
            className="h-8 w-8 rounded-full"
            onClick={handleSubmit}
          >
            {isLoading ? (
              <Square className="size-5 fill-current" />
            ) : (
              <ArrowUp className="size-5" />
            )}
          </Button>
        </PromptInputAction>
      </PromptInputActions>
    </PromptInput>
  )
}

```
Prompt Input with actions
You can use `PromptInputActions` to add actions with tooltips to the `PromptInput`.
```
"use client"

import {
  PromptInput,
  PromptInputAction,
  PromptInputActions,
  PromptInputTextarea,
} from "@/components/prompt-kit/prompt-input"
import { Button } from "@/components/ui/button"
import { ArrowUp, Square } from "lucide-react"
import { useState } from "react"

export function PromptInputBasic() {
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)

  const handleSubmit = () => {
    setIsLoading(true)
    setTimeout(() => {
      setIsLoading(false)
    }, 2000)
  }

  const handleValueChange = (value: string) => {
    setInput(value)
  }

  return (
    <PromptInput
      value={input}
      onValueChange={handleValueChange}
      isLoading={isLoading}
      onSubmit={handleSubmit}
      className="w-full max-w-(--breakpoint-md)"
    >
      <PromptInputTextarea placeholder="Ask me anything..." />
      <PromptInputActions className="justify-end pt-2">
        <PromptInputAction
          tooltip={isLoading ? "Stop generation" : "Send message"}
        >
          <Button
            variant="default"
            size="icon"
            className="h-8 w-8 rounded-full"
            onClick={handleSubmit}
          >
            {isLoading ? (
              <Square className="size-5 fill-current" />
            ) : (
              <ArrowUp className="size-5" />
            )}
          </Button>
        </PromptInputAction>
      </PromptInputActions>
    </PromptInput>
  )
}

```

Installation
------------

```
pnpm dlx shadcn@lastest add "https://prompt-kit.com/c/prompt-input.json"
```


Component API
-------------

### PromptInput


|Prop         |Type                   |Default|Description                                    |
|-------------|-----------------------|-------|-----------------------------------------------|
|isLoading    |boolean                |false  |Loading state of the input                     |
|value        |string                 |       |Controlled value of the input                  |
|onValueChange|(value: string) => void|       |Callback when input value changes              |
|maxHeight    |number | string        |240    |Maximum height of the textarea in pixels       |
|onSubmit     |() => void             |       |Callback when form is submitted (Enter pressed)|
|children     |React.ReactNode        |       |Child components to render                     |
|className    |string                 |       |Additional CSS classes                         |


### PromptInputTextarea


|Prop           |Type                            |Default|Description                           |
|---------------|--------------------------------|-------|--------------------------------------|
|disableAutosize|boolean                         |false  |Disable automatic height adjustment   |
|className      |string                          |       |Additional CSS classes                |
|onKeyDown      |(e: KeyboardEvent) => void      |       |Keyboard event handler                |
|disabled       |boolean                         |false  |Disable the textarea input            |
|...props       |React.ComponentProps<"textarea">|       |All other textarea props are supported|


### PromptInputActions


|Prop     |Type                                |Default|Description                      |
|---------|------------------------------------|-------|---------------------------------|
|children |React.ReactNode                     |       |Child components to render       |
|className|string                              |       |Additional CSS classes           |
|...props |React.HTMLAttributes<HTMLDivElement>|       |All other div props are supported|


### PromptInputAction



* Prop: tooltip
  * Type: React.ReactNode
  * Default: 
  * Description: Content to show in the tooltip
* Prop: children
  * Type: React.ReactNode
  * Default: 
  * Description: Child component to trigger the tooltip
* Prop: className
  * Type: string
  * Default: 
  * Description: Additional CSS classes for the tooltip
* Prop: side
  * Type: "top" | "bottom" | "left" | "right"
  * Default: "top"
  * Description: Position of the tooltip relative to the trigger
* Prop: disabled
  * Type: boolean
  * Default: false
  * Description: Disable the tooltip trigger
* Prop: ...props
  * Type: React.ComponentProps<typeof Tooltip>
  * Default: 
  * Description: All other Tooltip component props are supported
