---
description: 
globs: 
alwaysApply: true
---
Title: prompt-kit

Description: Core building blocks for AI apps. High-quality, accessible, and customizable components for AI interfaces.

Scroll Button
=============

A floating button component that appears when users scroll up in a container, allowing them to quickly return to the bottom of the content with a single click.

Examples
--------

### Basic Scroll Button

A simple implementation of the scroll button that appears when scrolling up and disappears when at the bottom of the container.
```
"use client"

import { ScrollButton } from "@/components/prompt-kit/scroll-button"
import { useRef, useState } from "react"

export function ScrollButtonBasic() {
  const containerRef = useRef<HTMLDivElement>(null)
  const bottomRef = useRef<HTMLDivElement>(null)

  const [content] = useState(
    Array(20)
      .fill(0)
      .map((_, i) => (
        <div key={i} className="border-b p-3">
          <h3 className="font-medium">Item {i + 1}</h3>
          <p className="text-muted-foreground">
            This is a sample item to demonstrate scrolling behavior.
          </p>
        </div>
      ))
  )

  return (
    <div className="relative flex h-[400px] w-full flex-col overflow-hidden">
      <div
        ref={containerRef}
        className="flex h-full w-full flex-col items-center justify-center overflow-y-auto"
      >
        {content}
        <div ref={bottomRef} />
      </div>

      <div className="absolute right-12 bottom-4">
        <ScrollButton containerRef={containerRef} scrollRef={bottomRef} />
      </div>
    </div>
  )
}

```


### Custom Scroll Button

Customize the appearance and behavior of the scroll button with different variants, sizes, and threshold values.
```
"use client"

import { ScrollButton } from "@/components/prompt-kit/scroll-button"
import { Button } from "@/components/ui/button"
import { useRef, useState } from "react"

export function ScrollButtonCustom() {
  const containerRef = useRef<HTMLDivElement>(null)
  const bottomRef = useRef<HTMLDivElement>(null)
  const [variant, setVariant] = useState<"default" | "outline" | "secondary">(
    "secondary"
  )
  const [threshold, setThreshold] = useState(50)

  // Sample content to enable scrolling
  const [content] = useState(
    Array(20)
      .fill(0)
      .map((_, i) => (
        <div key={i} className="border-b p-3">
          <h3 className="font-medium">Item {i + 1}</h3>
          <p className="text-muted-foreground">
            This is a sample item to demonstrate scrolling behavior.
          </p>
        </div>
      ))
  )

  return (
    <div className="flex h-[500px] w-full flex-col overflow-hidden">
      <div className="flex w-full items-center justify-between gap-2 border-b p-3 overflow-x-scroll">
        <div />
        <div className="flex gap-2">
          <Button
            size="sm"
            variant={variant === "default" ? "default" : "outline"}
            onClick={() => setVariant("default")}
          >
            Default
          </Button>
          <Button
            size="sm"
            variant={variant === "outline" ? "default" : "outline"}
            onClick={() => setVariant("outline")}
          >
            Outline
          </Button>
          <Button
            size="sm"
            variant={variant === "secondary" ? "default" : "outline"}
            onClick={() => setVariant("secondary")}
          >
            Secondary
          </Button>
        </div>
        <div className="flex items-center gap-2">
          <span className="text-sm">Threshold:</span>
          <input
            type="range"
            min="10"
            max="500"
            step="1"
            value={threshold}
            onChange={(e) => setThreshold(Number(e.target.value))}
            className="w-24"
          />
          <span className="w-8 text-sm">{threshold}px</span>
        </div>
      </div>

      <div className="relative flex-1 overflow-y-auto">
        <div
          ref={containerRef}
          className="flex h-full w-full flex-col items-center justify-center overflow-y-auto"
        >
          {content}
          <div ref={bottomRef} />
        </div>

        <div className="absolute right-4 bottom-4">
          <ScrollButton
            containerRef={containerRef}
            scrollRef={bottomRef}
            variant={variant}
            threshold={threshold}
          />
        </div>
      </div>
    </div>
  )
}

```

### With Chat Container

The ScrollButton works perfectly with ChatContainer for chat interfaces, providing an easy way for users to navigate long conversations.


```
"use client"

import { ChatContainer } from "@/components/prompt-kit/chat-container"
import { Markdown } from "@/components/prompt-kit/markdown"
import {
  Message,
  MessageAvatar,
  MessageContent,
} from "@/components/prompt-kit/message"
import { ScrollButton } from "@/components/prompt-kit/scroll-button"
import { Button } from "@/components/ui/button"
import { useEffect, useRef, useState } from "react"

export function ScrollButtonWithChat() {
  const containerRef = useRef<HTMLDivElement>(null)
  const bottomRef = useRef<HTMLDivElement>(null)

  const [messages, setMessages] = useState([
    {
      id: 1,
      role: "user",
      content: "Hello! Can you help me with a coding question?",
    },
    {
      id: 2,
      role: "assistant",
      content:
        "Of course! I'd be happy to help with your coding question. What would you like to know?",
    },
    {
      id: 3,
      role: "user",
      content: "How do I create a responsive layout with CSS Grid?",
    },
    {
      id: 4,
      role: "assistant",
      content:
        "Creating a responsive layout with CSS Grid is straightforward. Here's a basic example:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n}\n```\n\nThis creates a grid where:\n- Columns automatically fit as many as possible\n- Each column is at least 250px wide\n- Columns expand to fill available space\n- There's a 1rem gap between items\n\nWould you like me to explain more about how this works?",
    },
  ])

  const [isStreaming, setIsStreaming] = useState(false)
  const streamIntervalRef = useRef<NodeJS.Timeout | null>(null)
  const streamContentRef = useRef("")

  const streamResponse = () => {
    if (isStreaming) return

    setIsStreaming(true)
    const fullResponse =
      "Yes, I'd be happy to explain more about CSS Grid! The `grid-template-columns` property defines the columns in your grid. The `repeat()` function is a shorthand that repeats a pattern. `auto-fit` will fit as many columns as possible in the available space. The `minmax()` function sets a minimum and maximum size for each column. This creates a responsive layout that automatically adjusts based on the available space without requiring media queries."

    // Add a new message with empty content that will be filled gradually
    const newMessageId = messages.length + 1
    setMessages((prev) => [
      ...prev,
      {
        id: newMessageId,
        role: "assistant",
        content: "",
      },
    ])

    // Start streaming content character by character
    let charIndex = 0
    streamContentRef.current = ""

    streamIntervalRef.current = setInterval(() => {
      if (charIndex < fullResponse.length) {
        streamContentRef.current += fullResponse[charIndex]
        setMessages((prev) =>
          prev.map((msg) =>
            msg.id === newMessageId
              ? { ...msg, content: streamContentRef.current }
              : msg
          )
        )
        charIndex++
      } else {
        // End streaming
        clearInterval(streamIntervalRef.current!)
        setIsStreaming(false)
      }
    }, 30) // Stream a character every 30ms
  }

  // Clean up interval on unmount
  useEffect(() => {
    return () => {
      if (streamIntervalRef.current) {
        clearInterval(streamIntervalRef.current)
      }
    }
  }, [])

  return (
    <div className="relative flex h-[400px] w-full flex-col overflow-hidden">
      <div className="flex w-full items-center justify-between border-b p-3">
        <div />
        <Button size="sm" onClick={streamResponse} disabled={isStreaming}>
          {isStreaming ? "Streaming..." : "Add Message"}
        </Button>
      </div>

      <ChatContainer
        className="flex-1 space-y-4 p-4"
        ref={containerRef}
        scrollToRef={bottomRef}
      >
        {messages.map((message) => {
          const isAssistant = message.role === "assistant"

          return (
            <Message
              key={message.id}
              className={
                message.role === "user" ? "justify-end" : "justify-start"
              }
            >
              {isAssistant && (
                <MessageAvatar
                  src="/avatars/ai.png"
                  alt="AI Assistant"
                  fallback="AI"
                />
              )}
              <div className="max-w-[85%] flex-1 sm:max-w-[75%]">
                {isAssistant ? (
                  <div className="bg-secondary text-foreground prose rounded-lg p-2">
                    <Markdown>{message.content}</Markdown>
                  </div>
                ) : (
                  <MessageContent className="bg-primary text-primary-foreground">
                    {message.content}
                  </MessageContent>
                )}
              </div>
            </Message>
          )
        })}
      </ChatContainer>

      <div className="absolute right-7 bottom-4">
        <ScrollButton
          containerRef={containerRef}
          scrollRef={bottomRef}
          className="shadow-sm"
        />
      </div>
    </div>
  )
}

```

Installation
------------

CLIManual

```
pnpm dlx shadcn@lastest add "https://prompt-kit.com/c/scroll-button.json"
```

Component API
-------------

### ScrollButton

| Prop | Type | Default | Description |
| --- | --- | --- | --- |
| scrollRef | React.RefObject<HTMLElement> |  | Reference to the element to scroll to |
| containerRef | React.RefObject<HTMLElement> |  | Reference to the scrollable container |
| className | string |  | Additional CSS classes |
| threshold | number | 50 | Distance from bottom (in px) to show/hide the button |
| variant | "default" | "outline" | "ghost" | etc. | "outline" | Button variant from your UI button component |
| size | "default" | "sm" | "lg" | etc. | "sm" | Button size from your UI button component |
| ...props | React.ButtonHTMLAttributes<HTMLButtonElement> |  | All other button props |

Chat ContainerLoader
