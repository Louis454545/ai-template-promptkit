---
description: 
globs: 
alwaysApply: true
---
# prompt-kit
Chat Container
--------------

A component for creating chat interfaces with intelligent auto-scrolling behavior, designed to provide a smooth and responsive user experience in conversation interfaces.

Examples
--------

### Chat with Custom Scroll Behavior

Customize the auto-scroll behavior by toggling the auto-scroll feature on or off. This example demonstrates how to give users control over the scrolling behavior.
```
"use client"

import { ChatContainer } from "@/components/prompt-kit/chat-container"
import { Markdown } from "@/components/prompt-kit/markdown"
import {
  Message,
  MessageAvatar,
  MessageContent,
} from "@/components/prompt-kit/message"
import { Button } from "@/components/ui/button"
import { useRef, useState } from "react"

export function ChatWithCustomScroll() {
  const [autoScroll, setAutoScroll] = useState(true)
  const [isStreaming, setIsStreaming] = useState(false)
  const chatContainerRef = useRef<HTMLDivElement>(null)

  const [messages, setMessages] = useState([
    {
      id: 1,
      role: "user",
      content: "Hello! Can you help me with a coding question?",
    },
    {
      id: 2,
      role: "assistant",
      content:
        "Of course! I'd be happy to help with your coding question. What would you like to know?",
    },
    {
      id: 3,
      role: "user",
      content: "How do I create a responsive layout with CSS Grid?",
    },
    {
      id: 4,
      role: "assistant",
      content:
        "Creating a responsive layout with CSS Grid is straightforward. Here's a basic example:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n}\n```\n\nThis creates a grid where:\n- Columns automatically fit as many as possible\n- Each column is at least 250px wide\n- Columns expand to fill available space\n- There's a 1rem gap between items\n\nWould you like me to explain more about how this works?",
    },
  ])

  const addMessage = () => {
    setIsStreaming(true);
    
    // Add a new message
    setMessages([
      ...messages,
      {
        id: messages.length + 1,
        role:
          messages[messages.length - 1].role === "user" ? "assistant" : "user",
        content:
          messages[messages.length - 1].role === "user"
            ? "That's a great question! Let me explain further. CSS Grid is a powerful layout system that allows for two-dimensional layouts. The `minmax()` function is particularly useful as it sets a minimum and maximum size for grid tracks."
            : "Thanks for the explanation! Could you tell me more about grid areas?",
      },
    ])
    
    // Simulate streaming by setting isStreaming to false after a delay
    setTimeout(() => {
      setIsStreaming(false);
    }, 500);
  }

  return (
    <div className="flex h-[400px] w-full flex-col overflow-hidden">
      <div className="flex items-center justify-between border-b p-3">
        <div />
        <div className="flex items-center gap-2">
          <div className="flex items-center gap-1">
            <input
              type="checkbox"
              id="auto-scroll"
              checked={autoScroll}
              onChange={(e) => setAutoScroll(e.target.checked)}
              className="h-4 w-4"
            />
            <label htmlFor="auto-scroll" className="text-sm">
              Auto-scroll
            </label>
          </div>
          <Button size="sm" onClick={addMessage}>
            Add Message
          </Button>
        </div>
      </div>

      <ChatContainer 
        className="flex-1 space-y-4 p-4" 
        autoScroll={autoScroll}
        ref={chatContainerRef}
      >
        {messages.map((message) => {
          const isAssistant = message.role === "assistant"

          return (
            <Message
              key={message.id}
              className={
                message.role === "user" ? "justify-end" : "justify-start"
              }
            >
              {isAssistant && (
                <MessageAvatar
                  src="/avatars/ai.png"
                  alt="AI Assistant"
                  fallback="AI"
                />
              )}
              <div className="max-w-[85%] flex-1 sm:max-w-[75%]">
                {isAssistant ? (
                  <div className="bg-secondary text-foreground prose rounded-lg p-2">
                    <Markdown>{message.content}</Markdown>
                  </div>
                ) : (
                  <MessageContent className="bg-primary text-primary-foreground">
                    {message.content}
                  </MessageContent>
                )}
              </div>
            </Message>
          )
        })}
      </ChatContainer>
    </div>
  )
}

```
### Streaming Text Example

A chat container that demonstrates text streaming with automatic scrolling. Click the "Show Streaming" button to see a simulated streaming response with the smart auto-scroll behavior in action.
```
"use client"

import { ChatContainer } from "@/components/prompt-kit/chat-container"
import { Markdown } from "@/components/prompt-kit/markdown"
import {
  Message,
  MessageAvatar,
  MessageContent,
} from "@/components/prompt-kit/message"
import { Button } from "@/components/ui/button"
import { useEffect, useRef, useState } from "react"

export function ChatBasic() {
  const [messages, setMessages] = useState([
    {
      id: 1,
      role: "user",
      content: "Hello! Can you help me with a coding question?",
    },
    {
      id: 2,
      role: "assistant",
      content:
        "Of course! I'd be happy to help with your coding question. What would you like to know?",
    },
    {
      id: 3,
      role: "user",
      content: "How do I create a responsive layout with CSS Grid?",
    },
    {
      id: 4,
      role: "assistant",
      content:
        "Creating a responsive layout with CSS Grid is straightforward. Here's a basic example:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n}\n```\n\nThis creates a grid where:\n- Columns automatically fit as many as possible\n- Each column is at least 250px wide\n- Columns expand to fill available space\n- There's a 1rem gap between items\n\nWould you like me to explain more about how this works?",
    },
  ])

  const [isStreaming, setIsStreaming] = useState(false)
  const streamIntervalRef = useRef<NodeJS.Timeout | null>(null)
  const streamContentRef = useRef("")
  const chatContainerRef = useRef<HTMLDivElement>(null)

  const streamResponse = () => {
    if (isStreaming) return

    setIsStreaming(true)
    const fullResponse =
      "Yes, I'd be happy to explain more about CSS Grid! The `grid-template-columns` property defines the columns in your grid. The `repeat()` function is a shorthand that repeats a pattern. `auto-fit` will fit as many columns as possible in the available space. The `minmax()` function sets a minimum and maximum size for each column. This creates a responsive layout that automatically adjusts based on the available space without requiring media queries."

    const newMessageId = messages.length + 1
    setMessages((prev) => [
      ...prev,
      {
        id: newMessageId,
        role: "assistant",
        content: "",
      },
    ])

    let charIndex = 0
    streamContentRef.current = ""

    streamIntervalRef.current = setInterval(() => {
      if (charIndex < fullResponse.length) {
        streamContentRef.current += fullResponse[charIndex]
        setMessages((prev) =>
          prev.map((msg) =>
            msg.id === newMessageId
              ? { ...msg, content: streamContentRef.current }
              : msg
          )
        )
        charIndex++
      } else {
        clearInterval(streamIntervalRef.current!)
        setIsStreaming(false)
      }
    }, 30)
  }

  useEffect(() => {
    return () => {
      if (streamIntervalRef.current) {
        clearInterval(streamIntervalRef.current)
      }
    }
  }, [])

  return (
    <div className="flex h-[400px] w-full flex-col overflow-hidden">
      <div className="flex items-center justify-between border-b p-3">
        <div />
        <Button size="sm" onClick={streamResponse} disabled={isStreaming}>
          {isStreaming ? "Streaming..." : "Show Streaming"}
        </Button>
      </div>

      <ChatContainer 
        className="flex-1 space-y-4 p-4" 
        ref={chatContainerRef}
      >
        {messages.map((message) => {
          const isAssistant = message.role === "assistant"

          return (
            <Message
              key={message.id}
              className={
                message.role === "user" ? "justify-end" : "justify-start"
              }
            >
              {isAssistant && (
                <MessageAvatar
                  src="/avatars/ai.png"
                  alt="AI Assistant"
                  fallback="AI"
                />
              )}
              <div className="max-w-[85%] flex-1 sm:max-w-[75%]">
                {isAssistant ? (
                  <div className="bg-secondary text-foreground prose rounded-lg p-2">
                    <Markdown>{message.content}</Markdown>
                  </div>
                ) : (
                  <MessageContent className="bg-primary text-primary-foreground">
                    {message.content}
                  </MessageContent>
                )}
              </div>
            </Message>
          )
        })}
      </ChatContainer>
    </div>
  )
}

```
Installation
------------

```
pnpm dlx shadcn@lastest add "https://prompt-kit.com/c/chat-container.json"
```


Component API
-------------

### ChatContainer



* Prop: children
  * Type: React.ReactNode
  * Default: 
  * Description: Child components to render inside the container
* Prop: className
  * Type: string
  * Default: 
  * Description: Additional CSS classes
* Prop: autoScroll
  * Type: boolean
  * Default: true
  * Description: Whether to automatically scroll to bottom on content change
* Prop: scrollToRef
  * Type: React.RefObject<HTMLDivElement>
  * Default: 
  * Description: Optional custom reference for scroll target
* Prop: ...props
  * Type: React.HTMLAttributes<HTMLDivElement>
  * Default: 
  * Description: All other div props


Auto-Scroll Behavior
--------------------

The component implements sophisticated scrolling logic to provide a natural user experience:

*   **New Messages**: Automatically scrolls to the bottom when new messages are added
*   **Content Updates**: Scrolls to follow streaming content when already at the bottom
*   **User Control**:
    *   Temporarily disables auto-scrolling when users scroll up or use mouse wheel up
    *   Maintains scroll position during content updates when user has scrolled up
    *   Supports touch interactions by tracking touch start/move/end events
*   **Resume Auto-Scroll**: Re-enables auto-scrolling when users scroll back to the bottom

Using with ScrollButton
-----------------------

The ChatContainer pairs well with the ScrollButton component to provide a complete chat interface experience:

```
import { useRef } from "react"
import { ChatContainer } from "@/components/prompt-kit/chat-container"
import { ScrollButton } from "@/components/prompt-kit/scroll-button"

function ChatInterface() {
const containerRef = useRef<HTMLDivElement>(null)
const bottomRef = useRef<HTMLDivElement>(null)

return (

<div className="relative h-[500px]">
<ChatContainer ref={containerRef}>
{/* Your chat messages here */}
</ChatContainer>

    <div className="absolute bottom-4 right-4">
      <ScrollButton
        containerRef={containerRef}
        scrollRef={bottomRef}
      />
    </div>
  </div>

)
}
```


Performance Considerations
--------------------------

The ChatContainer component is optimized for performance in chat applications:

1.  Uses passive event listeners to avoid blocking the main thread
2.  Implements efficient scroll detection with browser-native APIs
3.  Uses `requestAnimationFrame` for smooth scrolling animations

For large chat histories, consider implementing virtualization or pagination to maintain performance.